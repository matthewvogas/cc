generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Account {
  id                       String  @id @default(cuid())
  userId                   String  @map("user_id")
  type                     String
  provider                 String
  providerAccountId        String  @map("provider_account_id")
  refresh_token            String? @db.Text
  access_token             String? @db.Text
  expires_at               Int?
  refresh_token_expires_in Int?
  token_type               String?
  scope                    String?
  id_token                 String? @db.Text
  session_state            String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique @map("session_token")
  userId       String   @map("user_id")
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

enum UserRole {
  AGENCY
  CREATOR
  CLIENT
  TESTER
}

model User {
  id                String             @id @default(cuid())
  idFacebook        String?
  idTiktok          String?
  idInstagram       String?
  name              String?
  password          String?
  email             String?            @unique
  emailVerified     DateTime?          @map("email_verified")
  image             String?
  accounts          Account[]
  sessions          Session[]
  clients           Client[]
  campaigns         Campaign[]
  creators          Creator[]
  posts             Post[]
  stories           Story[]
  role              UserRole?          @default(AGENCY)
  socialConnections SocialConnection[]

  sentInvitations      Invite[]         @relation("SentInvitations")
  receivedInvitations  Invite[]         @relation("ReceivedInvitations")
  initiatedConnections Connection[]     @relation("InitiatedConnections")
  receivedConnections  Connection[]     @relation("ReceivedConnections")
  instagramPages       instagramPages[] @relation("userIdInstagramPage")
  tiktokPages          tiktokPages[]    @relation("userIdTikTokPage")

  suscription    Suscriptions[]   @relation("userId")
  AccessCampaign AccessCampaign[]

  @@map("users")
}

model Suscriptions {
  id             String          @id @default(cuid())
  userId         String          @unique @map("user_id")
  user           User            @relation("userId", fields: [userId], references: [id])
  payment_method payment_methods

  customerId       String                  @unique
  subscriptionId   String?
  priceId          String?
  currentPeriodEnd DateTime?
  status           EnumSubscriptionStatus? @default(ACTIVE)
  subscriptionType subscriptionType?

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")
}

enum subscriptionType {
  YES
  ABSOLUTELY
}

enum EnumSubscriptionStatus {
  ACTIVE
  INACTIVE
  CANCELED
  UNPAID
}

enum payment_methods {
  STRIPE
  PAYPAL
}

model instagramPages {
  id     String @id @default(cuid())
  userId String

  username            String
  name                String
  profile_picture_url String
  followers_count     String
  accountId           String
  tokenId             String

  socialConnection SocialConnection[]
  user             User               @relation("userIdInstagramPage", fields: [userId], references: [id])
}

model tiktokPages {
  id     String @id @default(cuid())
  userId String

  username            String
  name                String
  profile_picture_url String
  followers_count     String
  accountId           String
  tokenId             String

  socialConnection SocialConnection[]
  user             User               @relation("userIdTikTokPage", fields: [userId], references: [id])
}

model Invite {
  id         String       @id @default(cuid())
  senderId   String
  receiverId String
  status     InviteStatus
  createdAt  DateTime     @default(now())

  sender   User @relation("SentInvitations", fields: [senderId], references: [id])
  receiver User @relation("ReceivedInvitations", fields: [receiverId], references: [id])

  @@map("invites")
}

enum InviteStatus {
  PENDING
  ACCEPTED
  REJECTED
}

model Connection {
  id        String   @id @default(cuid())
  userId1   String
  userId2   String
  createdAt DateTime @default(now())

  user1 User @relation("InitiatedConnections", fields: [userId1], references: [id])
  user2 User @relation("ReceivedConnections", fields: [userId2], references: [id])

  @@map("connections")
}

enum SocialPlatform {
  FACEBOOK
  TIKTOK
  INSTAGRAM
  PINTEREST
}

model SocialConnection {
  id             String           @id @default(cuid())
  user           User             @relation(fields: [userId], references: [id])
  userId         String
  platform       SocialPlatform
  token          String?
  refreshToken   String?
  longToken      String?
  instagramPages instagramPages[]
  tiktokPages    tiktokPages[]

  creators Creator[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
  @@map("verificationtokens")
}

model Creator {
  id                Int                @id @default(autoincrement())
  name              String?
  uuid              String?
  imageUrl          String?            @map("image_url")
  status            CreatorStatus?
  username          String
  platform          String
  campaigns         Campaign[]
  clients           Client[]
  posts             Post[]
  stories           Story[]
  users             User[]
  followersCount    Int?               @map("followers_count")
  accessToken       String?            @map("access_token")
  refreshToken      String?            @map("refresh_token")
  createdAt         DateTime           @default(now())
  updatedAt         DateTime           @updatedAt
  socialConnections SocialConnection[]

  @@unique([username, platform])
  @@map("creators")
}

model Client {
  id         Int        @id @default(autoincrement())
  name       String?
  imageUrl   String?    @map("image_url")
  coverImage String?    @map("cover_image")
  email      String?
  phone      String?
  userId     String     @map("user_id")
  user       User       @relation(fields: [userId], references: [id])
  campaigns  Campaign[]
  creators   Creator[]
  tags       Tag[]
  createdAt  DateTime   @default(now()) @map("created_at")
  updatedAt  DateTime   @updatedAt @map("updated_at")

  @@map("clients")
}

model Tag {
  id        Int      @id @default(autoincrement())
  name      String   @unique
  clients   Client[]
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  @@map("tags")
}

model Campaign {
  id             Int              @id @default(autoincrement())
  imageUrl       String?          @map("image_url")
  name           String
  description    String
  createdAt      DateTime         @default(now()) @map("created_at")
  updatedAt      DateTime         @updatedAt @map("updated_at")
  creators       Creator[]
  clientId       Int?             @map("client_id")
  client         Client?          @relation(fields: [clientId], references: [id])
  userId         String           @map("user_id")
  user           User             @relation(fields: [userId], references: [id])
  posts          Post[]
  stories        Story[]
  AccessCampaign AccessCampaign[]
  isPublic       Boolean?         @default(true)

  @@map("campaigns")
}

model Post {
  id               Int       @id @default(autoincrement())
  uuid             String?
  userId           String    @map("user_id")
  user             User      @relation(fields: [userId], references: [id])
  campaign         Campaign? @relation(fields: [campaignId], references: [id])
  campaignId       Int?      @map("campaign_id")
  creator          Creator?  @relation(fields: [creatorId], references: [id])
  creatorId        Int?      @map("creator_id")
  caption          String?
  permalink        String?
  shortcode        String
  platform         String
  imageUrl         String?   @map("image_url")
  mediaUrl         String?   @map("media_url")
  commentsCount    Int?      @map("comments_count")
  likesCount       Int?      @map("likes_count")
  engagementCount  Int?      @map("engagement_count")
  impressionsCount Int?      @map("impressions_count")
  reachCount       Int?      @map("reach_count")
  savesCount       Int?      @map("saves_count")
  sharesCount      Int?      @map("shares_count")
  playsCount       Int?      @map("plays_count")
  createdAt        DateTime  @default(now()) @map("created_at")
  updatedAt        DateTime  @updatedAt @map("updated_at")
  hashtags         hashtag[]

  @@map("posts")
}

model Story {
  id         Int       @id @default(autoincrement())
  uuid       String?
  userId     String    @map("user_id")
  user       User      @relation(fields: [userId], references: [id])
  campaign   Campaign? @relation(fields: [campaignId], references: [id])
  campaignId Int?      @map("campaign_id")
  creator    Creator?  @relation(fields: [creatorId], references: [id])
  creatorId  Int?      @map("creator_id")
  imageUrl   String?   @map("image_url")
  createdAt  DateTime  @default(now()) @map("created_at")
  updatedAt  DateTime  @updatedAt @map("updated_at")

  username         String?
  permalink        String?
  profile_activity Int?
  impressions      Int?
  reach            Int?
  replies          Int?
  shares           Int?
  profile_visits   Int?
  follows          Int?

  tapBack      Int?
  swipeForward Int?
  tapExit      Int?
  tapForward   Int?

  hashtags hashtag[]

  @@unique([imageUrl, campaignId])
  @@map("stories")
}

model hashtag {
  id      Int     @id @default(autoincrement())
  uuid    String?
  hashtag String?
  storyId Int?    @map("story_id")
  story   Story?  @relation(fields: [storyId], references: [id])
  postId  Int?    @map("post_id")
  post    Post?   @relation(fields: [postId], references: [id])
}

enum CreatorStatus {
  SIGNEDUP
  INVITE
  REJECTED
}

model AccessCampaign {
  id Int @id @default(autoincrement())

  userId     String?
  CampaignId Int
  accessType String
  createdAt  DateTime @default(now())
  status     String?
  email      String?

  user     User?    @relation(fields: [userId], references: [id])
  campaign Campaign @relation(fields: [CampaignId], references: [id])
}

model ShareAccess {
  id    Int        @id @default(autoincrement())
  email String
  token String     @unique
  used  Boolean    @default(false)
  type  typeAcess?
}

enum typeAcess {
  CAMPAIGN
}
