generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Account {
  id                       String  @id @default(cuid())
  userId                   String  @map("user_id")
  type                     String
  provider                 String
  providerAccountId        String  @map("provider_account_id")
  refresh_token            String? @db.Text
  access_token             String? @db.Text
  expires_at               Int?
  refresh_token_expires_in Int?
  token_type               String?
  scope                    String?
  id_token                 String? @db.Text
  session_state            String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique @map("session_token")
  userId       String   @map("user_id")
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

enum UserRole {
  AGENCY
  CREATOR
  CLIENT
  TESTER
}

model User {
  id            String     @id @default(cuid())
  idFacebook    String?
  idTiktok      String?
  idInstagram   String?
  name          String?
  password      String?
  email         String?    @unique
  emailVerified DateTime?  @map("email_verified")
  image         String?
  accounts      Account[]
  sessions      Session[]
  clients       Client[]
  campaigns     Campaign[]
  creators      Creator[]
  posts         Post[]
  stories       Story[]
  role          UserRole   @default(AGENCY)

  @@map("users")
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
  @@map("verificationtokens")
}

model Creator {
  id             Int            @id @default(autoincrement())
  name           String?
  uuid           String?
  imageUrl       String?        @map("image_url")
  status         CreatorStatus?
  username       String
  platform       String
  campaigns      Campaign[]
  clients        Client[]
  posts          Post[]
  stories        Story[]
  users          User[]
  followersCount Int?           @map("followers_count")
  accessToken    String?        @map("access_token")
  refreshToken   String?        @map("refresh_token")
  createdAt      DateTime       @default(now())
  updatedAt      DateTime       @updatedAt

  @@unique([username, platform])
  @@map("creators")
}

model Client {
  id        Int        @id @default(autoincrement())
  name      String?
  imageUrl  String?    @map("image_url")
  email     String?
  phone     String?
  userId    String     @map("user_id")
  user      User       @relation(fields: [userId], references: [id])
  campaigns Campaign[]
  creators  Creator[]
  tags      Tag[]
  createdAt DateTime   @default(now()) @map("created_at")
  updatedAt DateTime   @updatedAt @map("updated_at")

  @@map("clients")
}

model Tag {
  id        Int      @id @default(autoincrement())
  name      String   @unique
  clients   Client[]
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  @@map("tags")
}

model Campaign {
  id          Int       @id @default(autoincrement())
  name        String
  description String
  createdAt   DateTime  @default(now()) @map("created_at")
  updatedAt   DateTime  @updatedAt @map("updated_at")
  creators    Creator[]
  clientId    Int?      @map("client_id")
  client      Client?   @relation(fields: [clientId], references: [id])
  userId      String    @map("user_id")
  user        User      @relation(fields: [userId], references: [id])
  posts       Post[]
  stories     Story[]

  @@map("campaigns")
}

model Post {
  id               Int       @id @default(autoincrement())
  uuid             String?
  userId           String    @map("user_id")
  user             User      @relation(fields: [userId], references: [id])
  campaign         Campaign? @relation(fields: [campaignId], references: [id])
  campaignId       Int?      @map("campaign_id")
  creator          Creator?  @relation(fields: [creatorId], references: [id])
  creatorId        Int?      @map("creator_id")
  caption          String?
  permalink        String?
  shortcode        String
  platform         String
  imageUrl         String?   @map("image_url")
  mediaUrl         String?   @map("media_url")
  commentsCount    Int?      @map("comments_count")
  likesCount       Int?      @map("likes_count")
  engagementCount  Int?      @map("engagement_count")
  impressionsCount Int?      @map("impressions_count")
  reachCount       Int?      @map("reach_count")
  savesCount       Int?      @map("saves_count")
  sharesCount      Int?      @map("shares_count")
  playsCount       Int?      @map("plays_count")
  createdAt        DateTime  @default(now()) @map("created_at")
  updatedAt        DateTime  @updatedAt @map("updated_at")

  @@unique([shortcode, platform])
  @@map("posts")
}

model Story {
  id         Int       @id @default(autoincrement())
  uuid       String?
  userId     String    @map("user_id")
  user       User      @relation(fields: [userId], references: [id])
  campaign   Campaign? @relation(fields: [campaignId], references: [id])
  campaignId Int?      @map("campaign_id")
  creator    Creator?  @relation(fields: [creatorId], references: [id])
  creatorId  Int?      @map("creator_id")
  imageUrl   String?   @map("image_url")
  createdAt  DateTime  @default(now()) @map("created_at")
  updatedAt  DateTime  @updatedAt @map("updated_at")

  @@unique([imageUrl, campaignId])
  @@map("stories")
}

enum CreatorStatus {
  SIGNEDUP
  INVITE
  REJECTED
}
