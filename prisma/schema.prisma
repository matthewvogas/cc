generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// NextAuth Schema

model Account {
  id                    String  @id @default(cuid())
  userId                String  @map("user_id")
  type                  String
  provider              String
  providerAccountId     String  @map("provider_account_id")
  refresh_token         String? @db.Text
  access_token          String? @db.Text
  expires_at         Int?
  refresh_token_expires_in Int? 
  token_type         String?
  scope              String?
  id_token           String? @db.Text
  session_state      String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model Session {
  id           String      @id @default(cuid())
  sessionToken String   @unique @map("session_token")
  userId       String      @map("user_id")
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

model User {
  id            String          @id @default(cuid())
  name          String?
  email         String?      @unique
  password      String?
  emailVerified DateTime?    @map("email_verified")
  image         String?
  website       String?
  companyName   String?      @map("company_name")
  companySizeId Int?         @map("company_size_id")
  companySize   CompanySize? @relation(fields: [companySizeId], references: [id])
  companyTypeId Int?         @map("company_type_id")
  companyType   CompanyType? @relation(fields: [companyTypeId], references: [id])
  createdAt     DateTime     @default(now()) @map("created_at")
  updatedAt     DateTime     @updatedAt @map("updated_at")
  clients       Client[]
  creators      Creator[]
  campaigns     campaign[]
  accounts      Account[]
  sessions      Session[]

  @@map("users")
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
  @@map("verificationtokens")
}

// model tenant {
//   id              Int           @id @default(autoincrement())
//   email           String        @unique
//   password        String
//   name            String?
//   website         String?
//   company_name    String?
//   company_size_id Int?
//   company_size    company_size? @relation(fields: [company_size_id], references: [id])
//   company_type_id Int?
//   company_type    company_type? @relation(fields: [company_type_id], references: [id])
//   created_at      DateTime      @default(now())
//   updated_at      DateTime      @updatedAt
//   clients         client[]
//   creators        creator[]
//   campaigns       campaign[]
// }

model CompanySize {
  id          Int    @id @default(autoincrement())
  description String
  users       User[]

  @@map("company_sizes")
}

model CompanyType {
  id          Int    @id @default(autoincrement())
  description String
  users       User[]

  @@map("company_types")
}

model Client {
  id        Int        @id @default(autoincrement())
  name      String
  email     String?
  phone     String?
  userId    String        @map("user_id")
  user      User       @relation(fields: [userId], references: [id])
  campaigns campaign[]
  createdAt DateTime   @default(now()) @map("created_at")
  updatedAt DateTime   @updatedAt @map("updated_at")

  @@map("clients")
}

model SocialNetworkAccount {
  id        Int     @id @default(autoincrement())
  token     String
  platform  String
  creatorId Int     @map("creator_id")
  creator   Creator @relation(fields: [creatorId], references: [id])

  @@map("social_network_accounts")
}

model Creator {
  id                    Int                    @id @default(autoincrement())
  userId                String                    @map("user_id")
  user                  User                   @relation(fields: [userId], references: [id])
  name                  String?
  username              String
  followersCount        Int?                   @map("followers_count")
  followsCount          Int?                   @map("follows_count")
  mediaCount            Int?                   @map("media_count")
  socialNetworkAccounts SocialNetworkAccount[]
  campaigns             CreatorCampaign[]
  createdAt             DateTime               @default(now()) @map("created_at")
  updatedAt             DateTime               @updatedAt @map("updated_at")

  @@map("creators")
}

model CreatorCampaign {
  campaignId Int      @map("campaign_id")
  campaign   campaign @relation(fields: [campaignId], references: [id])
  creatorId  Int
  creator    Creator  @relation(fields: [creatorId], references: [id])
  createdAt  DateTime @default(now()) @map("created_at")
  updatedAt  DateTime @updatedAt @map("updated_at")

  @@id([campaignId, creatorId])
  @@map("creators_campaigns")
}

model campaign {
  id          Int               @id @default(autoincrement())
  name        String
  description String
  createdAt   DateTime          @default(now()) @map("created_at")
  updatedAt   DateTime          @updatedAt @map("updated_at")
  creators    CreatorCampaign[]
  clientId    Int?              @map("client_id")
  client      Client?           @relation(fields: [clientId], references: [id])
  userId      String            @map("user_id")
  user        User              @relation(fields: [userId], references: [id])
  posts       post[]

  @@map("campaigns")
}

model post {
  id               Int      @id @default(autoincrement())
  igId             String   @unique @map("ig_id")
  campaign         campaign @relation(fields: [campaignId], references: [id])
  campaignId       Int      @map("campaign_id")
  caption          String?
  mediaProductType String?  @map("media_product_type")
  mediaType        String?  @map("media_type")
  permalink        String?
  shortcode        String?
  videoUrl         String?  @map("video_url")
  imageUrl         String?  @map("image_url")
  commentsCount    Int?     @map("comments_count")
  likesCount       Int?     @map("likes_count")
  followersCount   Int?     @map("followers_count")
  username         String?
  engagementCount  Int?     @map("engagement_count")
  impressionsCount Int?     @map("impressions_count")
  reachCount       Int?     @map("reach_count")
  savesCount       Int?     @map("saves_count")
  sharesCount      Int?     @map("shares_count")
  createdAt        DateTime @default(now()) @map("created_at")
  updatedAt        DateTime @updatedAt @map("updated_at")
}
